/* client/src/css/animations.css */

/* --- Base Utility Classes for Animations --- */

/* Use this class on elements that should start hidden and then animate in */
.hidden-on-load {
    opacity: 0;
    visibility: hidden;
}

/* Base class for elements that animate using JS (IntersectionObserver) */
.animate-on-scroll {
    opacity: 0;
    transform: translateY(20px); /* Default starting position */
    transition: opacity 0.6s ease-out, transform 0.6s ease-out; /* Smooth transition when 'in-view' is added */
}

/* Class added by JS when element is in view */
.animate-on-scroll.in-view {
    opacity: 1;
    transform: translateY(0);
    visibility: visible; /* Make visible after animation starts */
}


/* --- General Purpose Keyframe Animations --- */

/* Fade In */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

/* Fade In and Slide Up */
@keyframes fadeInSlideUp {
    from {
        opacity: 0;
        transform: translateY(40px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Fade In and Slide Down */
@keyframes fadeInSlideDown {
    from {
        opacity: 0;
        transform: translateY(-40px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Fade In and Slide from Left */
@keyframes fadeInSlideLeft {
    from {
        opacity: 0;
        transform: translateX(-40px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Fade In and Slide from Right */
@keyframes fadeInSlideRight {
    from {
        opacity: 0;
        transform: translateX(40px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Fade In and Scale Up (Zoom In) */
@keyframes fadeInScaleUp {
    from {
        opacity: 0;
        transform: scale(0.8);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Pulsating Effect (for indicators, buttons etc.) */
@keyframes pulse {
    0% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(255, 112, 0, 0.7); /* primary-orange shadow */
    }
    70% {
        transform: scale(1.05);
        box-shadow: 0 0 0 15px rgba(255, 112, 0, 0);
    }
    100% {
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(255, 112, 0, 0);
    }
}

/* --- Reusable Animation Classes --- */

/* Apply these classes directly to elements that should animate immediately on load */
.animate-fade-in {
    animation: fadeIn 0.8s ease-out forwards;
}

.animate-slide-up {
    animation: fadeInSlideUp 0.8s ease-out forwards;
}

.animate-slide-down {
    animation: fadeInSlideDown 0.8s ease-out forwards;
}

.animate-slide-left {
    animation: fadeInSlideLeft 0.8s ease-out forwards;
}

.animate-slide-right {
    animation: fadeInSlideRight 0.8s ease-out forwards;
}

.animate-scale-up {
    animation: fadeInScaleUp 0.8s ease-out forwards;
}

.animate-pulse {
    animation: pulse 2s infinite ease-in-out;
}


/* --- Transition Utility Classes (for hover/focus effects) --- */

.transition-all-ease {
    transition: all 0.3s ease-in-out;
}

.transition-transform-ease {
    transition: transform 0.3s ease-in-out;
}

.transition-opacity-ease {
    transition: opacity 0.3s ease-in-out;
}

.transition-colors-ease {
    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out, border-color 0.3s ease-in-out;
}

/* Staggering for lists/grids (requires JS to apply delay) */
/* .staggered-item { animation-delay: var(--animation-delay, 0s); } */

/*
   How to use .staggered-item:
   In your JS, for each item in a map, set a style property:
   <div className="staggered-item" style={{ '--animation-delay': `${index * 0.1}s` }}>
     ...
   </div>
   And the animation itself would be a generic one, e.g., fadeInSlideUp
*/

/* Example of how you might apply a staggered effect in specific CSS:
   .your-container.in-view .staggered-item {
       animation: fadeInSlideUp 0.6s ease-out forwards;
   }
*/
